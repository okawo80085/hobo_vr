// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: message.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_message_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_message_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3015000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3015008 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "controller.pb.h"
#include "devices.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_message_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_message_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[2]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_message_2eproto;
::PROTOBUF_NAMESPACE_ID::Metadata descriptor_table_message_2eproto_metadata_getter(int index);
namespace VRProto {
class Request;
struct RequestDefaultTypeInternal;
extern RequestDefaultTypeInternal _Request_default_instance_;
class VRMessage;
struct VRMessageDefaultTypeInternal;
extern VRMessageDefaultTypeInternal _VRMessage_default_instance_;
}  // namespace VRProto
PROTOBUF_NAMESPACE_OPEN
template<> ::VRProto::Request* Arena::CreateMaybeMessage<::VRProto::Request>(Arena*);
template<> ::VRProto::VRMessage* Arena::CreateMaybeMessage<::VRProto::VRMessage>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace VRProto {

enum RequestType : int {
  RequestTypeController = 0,
  RequestTypeDeviceList = 1,
  RequestType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  RequestType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool RequestType_IsValid(int value);
constexpr RequestType RequestType_MIN = RequestTypeController;
constexpr RequestType RequestType_MAX = RequestTypeDeviceList;
constexpr int RequestType_ARRAYSIZE = RequestType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* RequestType_descriptor();
template<typename T>
inline const std::string& RequestType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, RequestType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function RequestType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    RequestType_descriptor(), enum_t_value);
}
inline bool RequestType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, RequestType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<RequestType>(
    RequestType_descriptor(), name, value);
}
// ===================================================================

class Request PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:VRProto.Request) */ {
 public:
  inline Request() : Request(nullptr) {}
  virtual ~Request();
  explicit constexpr Request(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Request(const Request& from);
  Request(Request&& from) noexcept
    : Request() {
    *this = ::std::move(from);
  }

  inline Request& operator=(const Request& from) {
    CopyFrom(from);
    return *this;
  }
  inline Request& operator=(Request&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Request& default_instance() {
    return *internal_default_instance();
  }
  static inline const Request* internal_default_instance() {
    return reinterpret_cast<const Request*>(
               &_Request_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Request& a, Request& b) {
    a.Swap(&b);
  }
  inline void Swap(Request* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Request* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Request* New() const final {
    return CreateMaybeMessage<Request>(nullptr);
  }

  Request* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Request>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Request& from);
  void MergeFrom(const Request& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Request* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "VRProto.Request";
  }
  protected:
  explicit Request(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_message_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTypeFieldNumber = 1,
  };
  // .VRProto.RequestType type = 1;
  void clear_type();
  ::VRProto::RequestType type() const;
  void set_type(::VRProto::RequestType value);
  private:
  ::VRProto::RequestType _internal_type() const;
  void _internal_set_type(::VRProto::RequestType value);
  public:

  // @@protoc_insertion_point(class_scope:VRProto.Request)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  int type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_message_2eproto;
};
// -------------------------------------------------------------------

class VRMessage PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:VRProto.VRMessage) */ {
 public:
  inline VRMessage() : VRMessage(nullptr) {}
  virtual ~VRMessage();
  explicit constexpr VRMessage(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  VRMessage(const VRMessage& from);
  VRMessage(VRMessage&& from) noexcept
    : VRMessage() {
    *this = ::std::move(from);
  }

  inline VRMessage& operator=(const VRMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline VRMessage& operator=(VRMessage&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const VRMessage& default_instance() {
    return *internal_default_instance();
  }
  enum VRUnionCase {
    kController = 1,
    kDeviceList = 2,
    kRequest = 3,
    kAck = 4,
    VRUNION_NOT_SET = 0,
  };

  static inline const VRMessage* internal_default_instance() {
    return reinterpret_cast<const VRMessage*>(
               &_VRMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(VRMessage& a, VRMessage& b) {
    a.Swap(&b);
  }
  inline void Swap(VRMessage* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(VRMessage* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline VRMessage* New() const final {
    return CreateMaybeMessage<VRMessage>(nullptr);
  }

  VRMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<VRMessage>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const VRMessage& from);
  void MergeFrom(const VRMessage& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(VRMessage* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "VRProto.VRMessage";
  }
  protected:
  explicit VRMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_message_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kControllerFieldNumber = 1,
    kDeviceListFieldNumber = 2,
    kRequestFieldNumber = 3,
    kAckFieldNumber = 4,
  };
  // .VRProto.Controller controller = 1;
  bool has_controller() const;
  private:
  bool _internal_has_controller() const;
  public:
  void clear_controller();
  const ::VRProto::Controller& controller() const;
  ::VRProto::Controller* release_controller();
  ::VRProto::Controller* mutable_controller();
  void set_allocated_controller(::VRProto::Controller* controller);
  private:
  const ::VRProto::Controller& _internal_controller() const;
  ::VRProto::Controller* _internal_mutable_controller();
  public:
  void unsafe_arena_set_allocated_controller(
      ::VRProto::Controller* controller);
  ::VRProto::Controller* unsafe_arena_release_controller();

  // .VRProto.DeviceList device_list = 2;
  bool has_device_list() const;
  private:
  bool _internal_has_device_list() const;
  public:
  void clear_device_list();
  const ::VRProto::DeviceList& device_list() const;
  ::VRProto::DeviceList* release_device_list();
  ::VRProto::DeviceList* mutable_device_list();
  void set_allocated_device_list(::VRProto::DeviceList* device_list);
  private:
  const ::VRProto::DeviceList& _internal_device_list() const;
  ::VRProto::DeviceList* _internal_mutable_device_list();
  public:
  void unsafe_arena_set_allocated_device_list(
      ::VRProto::DeviceList* device_list);
  ::VRProto::DeviceList* unsafe_arena_release_device_list();

  // .VRProto.Request request = 3;
  bool has_request() const;
  private:
  bool _internal_has_request() const;
  public:
  void clear_request();
  const ::VRProto::Request& request() const;
  ::VRProto::Request* release_request();
  ::VRProto::Request* mutable_request();
  void set_allocated_request(::VRProto::Request* request);
  private:
  const ::VRProto::Request& _internal_request() const;
  ::VRProto::Request* _internal_mutable_request();
  public:
  void unsafe_arena_set_allocated_request(
      ::VRProto::Request* request);
  ::VRProto::Request* unsafe_arena_release_request();

  // bool ack = 4;
  bool has_ack() const;
  private:
  bool _internal_has_ack() const;
  public:
  void clear_ack();
  bool ack() const;
  void set_ack(bool value);
  private:
  bool _internal_ack() const;
  void _internal_set_ack(bool value);
  public:

  void clear_VRUnion();
  VRUnionCase VRUnion_case() const;
  // @@protoc_insertion_point(class_scope:VRProto.VRMessage)
 private:
  class _Internal;
  void set_has_controller();
  void set_has_device_list();
  void set_has_request();
  void set_has_ack();

  inline bool has_VRUnion() const;
  inline void clear_has_VRUnion();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  union VRUnionUnion {
    constexpr VRUnionUnion() : _constinit_{} {}
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
    ::VRProto::Controller* controller_;
    ::VRProto::DeviceList* device_list_;
    ::VRProto::Request* request_;
    bool ack_;
  } VRUnion_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_message_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Request

// .VRProto.RequestType type = 1;
inline void Request::clear_type() {
  type_ = 0;
}
inline ::VRProto::RequestType Request::_internal_type() const {
  return static_cast< ::VRProto::RequestType >(type_);
}
inline ::VRProto::RequestType Request::type() const {
  // @@protoc_insertion_point(field_get:VRProto.Request.type)
  return _internal_type();
}
inline void Request::_internal_set_type(::VRProto::RequestType value) {
  
  type_ = value;
}
inline void Request::set_type(::VRProto::RequestType value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:VRProto.Request.type)
}

// -------------------------------------------------------------------

// VRMessage

// .VRProto.Controller controller = 1;
inline bool VRMessage::_internal_has_controller() const {
  return VRUnion_case() == kController;
}
inline bool VRMessage::has_controller() const {
  return _internal_has_controller();
}
inline void VRMessage::set_has_controller() {
  _oneof_case_[0] = kController;
}
inline ::VRProto::Controller* VRMessage::release_controller() {
  // @@protoc_insertion_point(field_release:VRProto.VRMessage.controller)
  if (_internal_has_controller()) {
    clear_has_VRUnion();
      ::VRProto::Controller* temp = VRUnion_.controller_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    VRUnion_.controller_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::VRProto::Controller& VRMessage::_internal_controller() const {
  return _internal_has_controller()
      ? *VRUnion_.controller_
      : reinterpret_cast< ::VRProto::Controller&>(::VRProto::_Controller_default_instance_);
}
inline const ::VRProto::Controller& VRMessage::controller() const {
  // @@protoc_insertion_point(field_get:VRProto.VRMessage.controller)
  return _internal_controller();
}
inline ::VRProto::Controller* VRMessage::unsafe_arena_release_controller() {
  // @@protoc_insertion_point(field_unsafe_arena_release:VRProto.VRMessage.controller)
  if (_internal_has_controller()) {
    clear_has_VRUnion();
    ::VRProto::Controller* temp = VRUnion_.controller_;
    VRUnion_.controller_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void VRMessage::unsafe_arena_set_allocated_controller(::VRProto::Controller* controller) {
  clear_VRUnion();
  if (controller) {
    set_has_controller();
    VRUnion_.controller_ = controller;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:VRProto.VRMessage.controller)
}
inline ::VRProto::Controller* VRMessage::_internal_mutable_controller() {
  if (!_internal_has_controller()) {
    clear_VRUnion();
    set_has_controller();
    VRUnion_.controller_ = CreateMaybeMessage< ::VRProto::Controller >(GetArena());
  }
  return VRUnion_.controller_;
}
inline ::VRProto::Controller* VRMessage::mutable_controller() {
  // @@protoc_insertion_point(field_mutable:VRProto.VRMessage.controller)
  return _internal_mutable_controller();
}

// .VRProto.DeviceList device_list = 2;
inline bool VRMessage::_internal_has_device_list() const {
  return VRUnion_case() == kDeviceList;
}
inline bool VRMessage::has_device_list() const {
  return _internal_has_device_list();
}
inline void VRMessage::set_has_device_list() {
  _oneof_case_[0] = kDeviceList;
}
inline ::VRProto::DeviceList* VRMessage::release_device_list() {
  // @@protoc_insertion_point(field_release:VRProto.VRMessage.device_list)
  if (_internal_has_device_list()) {
    clear_has_VRUnion();
      ::VRProto::DeviceList* temp = VRUnion_.device_list_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    VRUnion_.device_list_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::VRProto::DeviceList& VRMessage::_internal_device_list() const {
  return _internal_has_device_list()
      ? *VRUnion_.device_list_
      : reinterpret_cast< ::VRProto::DeviceList&>(::VRProto::_DeviceList_default_instance_);
}
inline const ::VRProto::DeviceList& VRMessage::device_list() const {
  // @@protoc_insertion_point(field_get:VRProto.VRMessage.device_list)
  return _internal_device_list();
}
inline ::VRProto::DeviceList* VRMessage::unsafe_arena_release_device_list() {
  // @@protoc_insertion_point(field_unsafe_arena_release:VRProto.VRMessage.device_list)
  if (_internal_has_device_list()) {
    clear_has_VRUnion();
    ::VRProto::DeviceList* temp = VRUnion_.device_list_;
    VRUnion_.device_list_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void VRMessage::unsafe_arena_set_allocated_device_list(::VRProto::DeviceList* device_list) {
  clear_VRUnion();
  if (device_list) {
    set_has_device_list();
    VRUnion_.device_list_ = device_list;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:VRProto.VRMessage.device_list)
}
inline ::VRProto::DeviceList* VRMessage::_internal_mutable_device_list() {
  if (!_internal_has_device_list()) {
    clear_VRUnion();
    set_has_device_list();
    VRUnion_.device_list_ = CreateMaybeMessage< ::VRProto::DeviceList >(GetArena());
  }
  return VRUnion_.device_list_;
}
inline ::VRProto::DeviceList* VRMessage::mutable_device_list() {
  // @@protoc_insertion_point(field_mutable:VRProto.VRMessage.device_list)
  return _internal_mutable_device_list();
}

// .VRProto.Request request = 3;
inline bool VRMessage::_internal_has_request() const {
  return VRUnion_case() == kRequest;
}
inline bool VRMessage::has_request() const {
  return _internal_has_request();
}
inline void VRMessage::set_has_request() {
  _oneof_case_[0] = kRequest;
}
inline void VRMessage::clear_request() {
  if (_internal_has_request()) {
    if (GetArena() == nullptr) {
      delete VRUnion_.request_;
    }
    clear_has_VRUnion();
  }
}
inline ::VRProto::Request* VRMessage::release_request() {
  // @@protoc_insertion_point(field_release:VRProto.VRMessage.request)
  if (_internal_has_request()) {
    clear_has_VRUnion();
      ::VRProto::Request* temp = VRUnion_.request_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    VRUnion_.request_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::VRProto::Request& VRMessage::_internal_request() const {
  return _internal_has_request()
      ? *VRUnion_.request_
      : reinterpret_cast< ::VRProto::Request&>(::VRProto::_Request_default_instance_);
}
inline const ::VRProto::Request& VRMessage::request() const {
  // @@protoc_insertion_point(field_get:VRProto.VRMessage.request)
  return _internal_request();
}
inline ::VRProto::Request* VRMessage::unsafe_arena_release_request() {
  // @@protoc_insertion_point(field_unsafe_arena_release:VRProto.VRMessage.request)
  if (_internal_has_request()) {
    clear_has_VRUnion();
    ::VRProto::Request* temp = VRUnion_.request_;
    VRUnion_.request_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void VRMessage::unsafe_arena_set_allocated_request(::VRProto::Request* request) {
  clear_VRUnion();
  if (request) {
    set_has_request();
    VRUnion_.request_ = request;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:VRProto.VRMessage.request)
}
inline ::VRProto::Request* VRMessage::_internal_mutable_request() {
  if (!_internal_has_request()) {
    clear_VRUnion();
    set_has_request();
    VRUnion_.request_ = CreateMaybeMessage< ::VRProto::Request >(GetArena());
  }
  return VRUnion_.request_;
}
inline ::VRProto::Request* VRMessage::mutable_request() {
  // @@protoc_insertion_point(field_mutable:VRProto.VRMessage.request)
  return _internal_mutable_request();
}

// bool ack = 4;
inline bool VRMessage::_internal_has_ack() const {
  return VRUnion_case() == kAck;
}
inline bool VRMessage::has_ack() const {
  return _internal_has_ack();
}
inline void VRMessage::set_has_ack() {
  _oneof_case_[0] = kAck;
}
inline void VRMessage::clear_ack() {
  if (_internal_has_ack()) {
    VRUnion_.ack_ = false;
    clear_has_VRUnion();
  }
}
inline bool VRMessage::_internal_ack() const {
  if (_internal_has_ack()) {
    return VRUnion_.ack_;
  }
  return false;
}
inline void VRMessage::_internal_set_ack(bool value) {
  if (!_internal_has_ack()) {
    clear_VRUnion();
    set_has_ack();
  }
  VRUnion_.ack_ = value;
}
inline bool VRMessage::ack() const {
  // @@protoc_insertion_point(field_get:VRProto.VRMessage.ack)
  return _internal_ack();
}
inline void VRMessage::set_ack(bool value) {
  _internal_set_ack(value);
  // @@protoc_insertion_point(field_set:VRProto.VRMessage.ack)
}

inline bool VRMessage::has_VRUnion() const {
  return VRUnion_case() != VRUNION_NOT_SET;
}
inline void VRMessage::clear_has_VRUnion() {
  _oneof_case_[0] = VRUNION_NOT_SET;
}
inline VRMessage::VRUnionCase VRMessage::VRUnion_case() const {
  return VRMessage::VRUnionCase(_oneof_case_[0]);
}
#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace VRProto

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::VRProto::RequestType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::VRProto::RequestType>() {
  return ::VRProto::RequestType_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_message_2eproto
