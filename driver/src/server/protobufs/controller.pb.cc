// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: controller.proto

#include "controller.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace VRProto {
constexpr Controller::Controller(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : pose_(nullptr)
  , buttons_(nullptr){}
struct ControllerDefaultTypeInternal {
  constexpr ControllerDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ControllerDefaultTypeInternal() {}
  union {
    Controller _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ControllerDefaultTypeInternal _Controller_default_instance_;
}  // namespace VRProto
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_controller_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_controller_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_controller_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_controller_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::VRProto::Controller, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::VRProto::Controller, pose_),
  PROTOBUF_FIELD_OFFSET(::VRProto::Controller, buttons_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::VRProto::Controller)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::VRProto::_Controller_default_instance_),
};

const char descriptor_table_protodef_controller_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\020controller.proto\022\007VRProto\032\017byte_dict.p"
  "roto\032\npose.proto\"M\n\nController\022\033\n\004pose\030\001"
  " \001(\0132\r.VRProto.Pose\022\"\n\007buttons\030\002 \001(\0132\021.V"
  "RProto.ByteDictb\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_controller_2eproto_deps[2] = {
  &::descriptor_table_byte_5fdict_2eproto,
  &::descriptor_table_pose_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_controller_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_controller_2eproto = {
  false, false, 143, descriptor_table_protodef_controller_2eproto, "controller.proto", 
  &descriptor_table_controller_2eproto_once, descriptor_table_controller_2eproto_deps, 2, 1,
  schemas, file_default_instances, TableStruct_controller_2eproto::offsets,
  file_level_metadata_controller_2eproto, file_level_enum_descriptors_controller_2eproto, file_level_service_descriptors_controller_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK ::PROTOBUF_NAMESPACE_ID::Metadata
descriptor_table_controller_2eproto_metadata_getter(int index) {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_controller_2eproto);
  return descriptor_table_controller_2eproto.file_level_metadata[index];
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_controller_2eproto(&descriptor_table_controller_2eproto);
namespace VRProto {

// ===================================================================

class Controller::_Internal {
 public:
  static const ::VRProto::Pose& pose(const Controller* msg);
  static const ::VRProto::ByteDict& buttons(const Controller* msg);
};

const ::VRProto::Pose&
Controller::_Internal::pose(const Controller* msg) {
  return *msg->pose_;
}
const ::VRProto::ByteDict&
Controller::_Internal::buttons(const Controller* msg) {
  return *msg->buttons_;
}
void Controller::clear_pose() {
  if (GetArena() == nullptr && pose_ != nullptr) {
    delete pose_;
  }
  pose_ = nullptr;
}
void Controller::clear_buttons() {
  if (GetArena() == nullptr && buttons_ != nullptr) {
    delete buttons_;
  }
  buttons_ = nullptr;
}
Controller::Controller(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:VRProto.Controller)
}
Controller::Controller(const Controller& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_pose()) {
    pose_ = new ::VRProto::Pose(*from.pose_);
  } else {
    pose_ = nullptr;
  }
  if (from._internal_has_buttons()) {
    buttons_ = new ::VRProto::ByteDict(*from.buttons_);
  } else {
    buttons_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:VRProto.Controller)
}

void Controller::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&pose_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&buttons_) -
    reinterpret_cast<char*>(&pose_)) + sizeof(buttons_));
}

Controller::~Controller() {
  // @@protoc_insertion_point(destructor:VRProto.Controller)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Controller::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete pose_;
  if (this != internal_default_instance()) delete buttons_;
}

void Controller::ArenaDtor(void* object) {
  Controller* _this = reinterpret_cast< Controller* >(object);
  (void)_this;
}
void Controller::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Controller::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Controller::Clear() {
// @@protoc_insertion_point(message_clear_start:VRProto.Controller)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && pose_ != nullptr) {
    delete pose_;
  }
  pose_ = nullptr;
  if (GetArena() == nullptr && buttons_ != nullptr) {
    delete buttons_;
  }
  buttons_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Controller::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .VRProto.Pose pose = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_pose(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .VRProto.ByteDict buttons = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_buttons(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Controller::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:VRProto.Controller)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .VRProto.Pose pose = 1;
  if (this->has_pose()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::pose(this), target, stream);
  }

  // .VRProto.ByteDict buttons = 2;
  if (this->has_buttons()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::buttons(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:VRProto.Controller)
  return target;
}

size_t Controller::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:VRProto.Controller)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .VRProto.Pose pose = 1;
  if (this->has_pose()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *pose_);
  }

  // .VRProto.ByteDict buttons = 2;
  if (this->has_buttons()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *buttons_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Controller::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:VRProto.Controller)
  GOOGLE_DCHECK_NE(&from, this);
  const Controller* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Controller>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:VRProto.Controller)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:VRProto.Controller)
    MergeFrom(*source);
  }
}

void Controller::MergeFrom(const Controller& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:VRProto.Controller)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_pose()) {
    _internal_mutable_pose()->::VRProto::Pose::MergeFrom(from._internal_pose());
  }
  if (from.has_buttons()) {
    _internal_mutable_buttons()->::VRProto::ByteDict::MergeFrom(from._internal_buttons());
  }
}

void Controller::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:VRProto.Controller)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Controller::CopyFrom(const Controller& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:VRProto.Controller)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Controller::IsInitialized() const {
  return true;
}

void Controller::InternalSwap(Controller* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Controller, buttons_)
      + sizeof(Controller::buttons_)
      - PROTOBUF_FIELD_OFFSET(Controller, pose_)>(
          reinterpret_cast<char*>(&pose_),
          reinterpret_cast<char*>(&other->pose_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Controller::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace VRProto
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::VRProto::Controller* Arena::CreateMaybeMessage< ::VRProto::Controller >(Arena* arena) {
  return Arena::CreateMessageInternal< ::VRProto::Controller >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
