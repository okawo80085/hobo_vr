// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_CONTROLLER_FBS_H_
#define FLATBUFFERS_GENERATED_CONTROLLER_FBS_H_

#include "flatbuffers/flatbuffers.h"

#include "byte_dict_generated.h"
#include "pose_generated.h"

namespace fbs {

struct Controller;
struct ControllerBuilder;

struct Controller FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef ControllerBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_POSE = 4,
    VT_BUTTONS = 6
  };
  const fbs::Pose *pose() const {
    return GetPointer<const fbs::Pose *>(VT_POSE);
  }
  const fbs::ByteDict *buttons() const {
    return GetPointer<const fbs::ByteDict *>(VT_BUTTONS);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_POSE) &&
           verifier.VerifyTable(pose()) &&
           VerifyOffset(verifier, VT_BUTTONS) &&
           verifier.VerifyTable(buttons()) &&
           verifier.EndTable();
  }
};

struct ControllerBuilder {
  typedef Controller Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_pose(flatbuffers::Offset<fbs::Pose> pose) {
    fbb_.AddOffset(Controller::VT_POSE, pose);
  }
  void add_buttons(flatbuffers::Offset<fbs::ByteDict> buttons) {
    fbb_.AddOffset(Controller::VT_BUTTONS, buttons);
  }
  explicit ControllerBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ControllerBuilder &operator=(const ControllerBuilder &);
  flatbuffers::Offset<Controller> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<Controller>(end);
    return o;
  }
};

inline flatbuffers::Offset<Controller> CreateController(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<fbs::Pose> pose = 0,
    flatbuffers::Offset<fbs::ByteDict> buttons = 0) {
  ControllerBuilder builder_(_fbb);
  builder_.add_buttons(buttons);
  builder_.add_pose(pose);
  return builder_.Finish();
}

inline const fbs::Controller *GetController(const void *buf) {
  return flatbuffers::GetRoot<fbs::Controller>(buf);
}

inline const fbs::Controller *GetSizePrefixedController(const void *buf) {
  return flatbuffers::GetSizePrefixedRoot<fbs::Controller>(buf);
}

inline bool VerifyControllerBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<fbs::Controller>(nullptr);
}

inline bool VerifySizePrefixedControllerBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<fbs::Controller>(nullptr);
}

inline void FinishControllerBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<fbs::Controller> root) {
  fbb.Finish(root);
}

inline void FinishSizePrefixedControllerBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<fbs::Controller> root) {
  fbb.FinishSizePrefixed(root);
}

}  // namespace fbs

#endif  // FLATBUFFERS_GENERATED_CONTROLLER_FBS_H_
