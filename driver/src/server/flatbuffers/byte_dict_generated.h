// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_BYTEDICT_FBS_H_
#define FLATBUFFERS_GENERATED_BYTEDICT_FBS_H_

#include "flatbuffers/flatbuffers.h"

namespace fbs {

struct ByteDict;
struct ByteDictBuilder;

struct ByteDictEntry;
struct ByteDictEntryBuilder;

struct ByteDict FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef ByteDictBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_ENTRIES = 4
  };
  const flatbuffers::Vector<flatbuffers::Offset<fbs::ByteDictEntry>> *entries() const {
    return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<fbs::ByteDictEntry>> *>(VT_ENTRIES);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_ENTRIES) &&
           verifier.VerifyVector(entries()) &&
           verifier.VerifyVectorOfTables(entries()) &&
           verifier.EndTable();
  }
};

struct ByteDictBuilder {
  typedef ByteDict Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_entries(flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<fbs::ByteDictEntry>>> entries) {
    fbb_.AddOffset(ByteDict::VT_ENTRIES, entries);
  }
  explicit ByteDictBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ByteDictBuilder &operator=(const ByteDictBuilder &);
  flatbuffers::Offset<ByteDict> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<ByteDict>(end);
    return o;
  }
};

inline flatbuffers::Offset<ByteDict> CreateByteDict(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<fbs::ByteDictEntry>>> entries = 0) {
  ByteDictBuilder builder_(_fbb);
  builder_.add_entries(entries);
  return builder_.Finish();
}

inline flatbuffers::Offset<ByteDict> CreateByteDictDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    std::vector<flatbuffers::Offset<fbs::ByteDictEntry>> *entries = nullptr) {
  auto entries__ = entries ? _fbb.CreateVectorOfSortedTables<fbs::ByteDictEntry>(entries) : 0;
  return fbs::CreateByteDict(
      _fbb,
      entries__);
}

struct ByteDictEntry FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef ByteDictEntryBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_KEY = 4,
    VT_VALUE = 6
  };
  int8_t key() const {
    return GetField<int8_t>(VT_KEY, 0);
  }
  bool KeyCompareLessThan(const ByteDictEntry *o) const {
    return key() < o->key();
  }
  int KeyCompareWithValue(int8_t val) const {
    return static_cast<int>(key() > val) - static_cast<int>(key() < val);
  }
  float value() const {
    return GetField<float>(VT_VALUE, 0.0f);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<int8_t>(verifier, VT_KEY) &&
           VerifyField<float>(verifier, VT_VALUE) &&
           verifier.EndTable();
  }
};

struct ByteDictEntryBuilder {
  typedef ByteDictEntry Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_key(int8_t key) {
    fbb_.AddElement<int8_t>(ByteDictEntry::VT_KEY, key, 0);
  }
  void add_value(float value) {
    fbb_.AddElement<float>(ByteDictEntry::VT_VALUE, value, 0.0f);
  }
  explicit ByteDictEntryBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ByteDictEntryBuilder &operator=(const ByteDictEntryBuilder &);
  flatbuffers::Offset<ByteDictEntry> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<ByteDictEntry>(end);
    return o;
  }
};

inline flatbuffers::Offset<ByteDictEntry> CreateByteDictEntry(
    flatbuffers::FlatBufferBuilder &_fbb,
    int8_t key = 0,
    float value = 0.0f) {
  ByteDictEntryBuilder builder_(_fbb);
  builder_.add_value(value);
  builder_.add_key(key);
  return builder_.Finish();
}

inline const fbs::ByteDict *GetByteDict(const void *buf) {
  return flatbuffers::GetRoot<fbs::ByteDict>(buf);
}

inline const fbs::ByteDict *GetSizePrefixedByteDict(const void *buf) {
  return flatbuffers::GetSizePrefixedRoot<fbs::ByteDict>(buf);
}

inline bool VerifyByteDictBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<fbs::ByteDict>(nullptr);
}

inline bool VerifySizePrefixedByteDictBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<fbs::ByteDict>(nullptr);
}

inline void FinishByteDictBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<fbs::ByteDict> root) {
  fbb.Finish(root);
}

inline void FinishSizePrefixedByteDictBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<fbs::ByteDict> root) {
  fbb.FinishSizePrefixed(root);
}

}  // namespace fbs

#endif  // FLATBUFFERS_GENERATED_BYTEDICT_FBS_H_
