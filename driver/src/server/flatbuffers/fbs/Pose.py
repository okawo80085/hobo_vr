# automatically generated by the FlatBuffers compiler, do not modify

# namespace: fbs

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class Pose(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAsPose(cls, buf, offset):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = Pose()
        x.Init(buf, n + offset)
        return x

    # Pose
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # Pose
    def Pos(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            x = o + self._tab.Pos
            from fbs.Vec3 import Vec3
            obj = Vec3()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # Pose
    def Quat(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = o + self._tab.Pos
            from fbs.Vec4 import Vec4
            obj = Vec4()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

def PoseStart(builder): builder.StartObject(2)
def PoseAddPos(builder, pos): builder.PrependStructSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(pos), 0)
def PoseAddQuat(builder, quat): builder.PrependStructSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(quat), 0)
def PoseEnd(builder): return builder.EndObject()
