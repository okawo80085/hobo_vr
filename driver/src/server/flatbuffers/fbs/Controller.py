# automatically generated by the FlatBuffers compiler, do not modify

# namespace: fbs

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class Controller(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAsController(cls, buf, offset):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = Controller()
        x.Init(buf, n + offset)
        return x

    # Controller
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # Controller
    def Pose(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            from fbs.Pose import Pose
            obj = Pose()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # Controller
    def Buttons(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            from fbs.ByteDict import ByteDict
            obj = ByteDict()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

def ControllerStart(builder): builder.StartObject(2)
def ControllerAddPose(builder, pose): builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(pose), 0)
def ControllerAddButtons(builder, buttons): builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(buttons), 0)
def ControllerEnd(builder): return builder.EndObject()
