// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_DEVICES_FBS_H_
#define FLATBUFFERS_GENERATED_DEVICES_FBS_H_

#include "flatbuffers/flatbuffers.h"

namespace fbs {

struct DeviceList;
struct DeviceListBuilder;

struct Device;
struct DeviceBuilder;

enum Type {
  Type_Invalid = 0,
  Type_HMD = 1,
  Type_Controller = 2,
  Type_GenericTracker = 3,
  Type_TrackingReference = 4,
  Type_DisplayRedirect = 5,
  Type_MIN = Type_Invalid,
  Type_MAX = Type_DisplayRedirect
};

inline const Type (&EnumValuesType())[6] {
  static const Type values[] = {
    Type_Invalid,
    Type_HMD,
    Type_Controller,
    Type_GenericTracker,
    Type_TrackingReference,
    Type_DisplayRedirect
  };
  return values;
}

inline const char * const *EnumNamesType() {
  static const char * const names[7] = {
    "Invalid",
    "HMD",
    "Controller",
    "GenericTracker",
    "TrackingReference",
    "DisplayRedirect",
    nullptr
  };
  return names;
}

inline const char *EnumNameType(Type e) {
  if (flatbuffers::IsOutRange(e, Type_Invalid, Type_DisplayRedirect)) return "";
  const size_t index = static_cast<size_t>(e);
  return EnumNamesType()[index];
}

struct DeviceList FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef DeviceListBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_DEVICES = 4
  };
  const flatbuffers::Vector<flatbuffers::Offset<fbs::Device>> *devices() const {
    return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<fbs::Device>> *>(VT_DEVICES);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_DEVICES) &&
           verifier.VerifyVector(devices()) &&
           verifier.VerifyVectorOfTables(devices()) &&
           verifier.EndTable();
  }
};

struct DeviceListBuilder {
  typedef DeviceList Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_devices(flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<fbs::Device>>> devices) {
    fbb_.AddOffset(DeviceList::VT_DEVICES, devices);
  }
  explicit DeviceListBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  DeviceListBuilder &operator=(const DeviceListBuilder &);
  flatbuffers::Offset<DeviceList> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<DeviceList>(end);
    return o;
  }
};

inline flatbuffers::Offset<DeviceList> CreateDeviceList(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<fbs::Device>>> devices = 0) {
  DeviceListBuilder builder_(_fbb);
  builder_.add_devices(devices);
  return builder_.Finish();
}

inline flatbuffers::Offset<DeviceList> CreateDeviceListDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    const std::vector<flatbuffers::Offset<fbs::Device>> *devices = nullptr) {
  auto devices__ = devices ? _fbb.CreateVector<flatbuffers::Offset<fbs::Device>>(*devices) : 0;
  return fbs::CreateDeviceList(
      _fbb,
      devices__);
}

struct Device FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef DeviceBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_TYPE = 4,
    VT_LEFT_HAND = 6,
    VT_UID = 8
  };
  fbs::Type type() const {
    return static_cast<fbs::Type>(GetField<int8_t>(VT_TYPE, 0));
  }
  bool left_hand() const {
    return GetField<uint8_t>(VT_LEFT_HAND, 0) != 0;
  }
  const flatbuffers::String *uid() const {
    return GetPointer<const flatbuffers::String *>(VT_UID);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<int8_t>(verifier, VT_TYPE) &&
           VerifyField<uint8_t>(verifier, VT_LEFT_HAND) &&
           VerifyOffset(verifier, VT_UID) &&
           verifier.VerifyString(uid()) &&
           verifier.EndTable();
  }
};

struct DeviceBuilder {
  typedef Device Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_type(fbs::Type type) {
    fbb_.AddElement<int8_t>(Device::VT_TYPE, static_cast<int8_t>(type), 0);
  }
  void add_left_hand(bool left_hand) {
    fbb_.AddElement<uint8_t>(Device::VT_LEFT_HAND, static_cast<uint8_t>(left_hand), 0);
  }
  void add_uid(flatbuffers::Offset<flatbuffers::String> uid) {
    fbb_.AddOffset(Device::VT_UID, uid);
  }
  explicit DeviceBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  DeviceBuilder &operator=(const DeviceBuilder &);
  flatbuffers::Offset<Device> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<Device>(end);
    return o;
  }
};

inline flatbuffers::Offset<Device> CreateDevice(
    flatbuffers::FlatBufferBuilder &_fbb,
    fbs::Type type = fbs::Type_Invalid,
    bool left_hand = false,
    flatbuffers::Offset<flatbuffers::String> uid = 0) {
  DeviceBuilder builder_(_fbb);
  builder_.add_uid(uid);
  builder_.add_left_hand(left_hand);
  builder_.add_type(type);
  return builder_.Finish();
}

inline flatbuffers::Offset<Device> CreateDeviceDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    fbs::Type type = fbs::Type_Invalid,
    bool left_hand = false,
    const char *uid = nullptr) {
  auto uid__ = uid ? _fbb.CreateString(uid) : 0;
  return fbs::CreateDevice(
      _fbb,
      type,
      left_hand,
      uid__);
}

inline const fbs::DeviceList *GetDeviceList(const void *buf) {
  return flatbuffers::GetRoot<fbs::DeviceList>(buf);
}

inline const fbs::DeviceList *GetSizePrefixedDeviceList(const void *buf) {
  return flatbuffers::GetSizePrefixedRoot<fbs::DeviceList>(buf);
}

inline bool VerifyDeviceListBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<fbs::DeviceList>(nullptr);
}

inline bool VerifySizePrefixedDeviceListBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<fbs::DeviceList>(nullptr);
}

inline void FinishDeviceListBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<fbs::DeviceList> root) {
  fbb.Finish(root);
}

inline void FinishSizePrefixedDeviceListBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<fbs::DeviceList> root) {
  fbb.FinishSizePrefixed(root);
}

}  // namespace fbs

#endif  // FLATBUFFERS_GENERATED_DEVICES_FBS_H_
