// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_MESSAGE_FBS_H_
#define FLATBUFFERS_GENERATED_MESSAGE_FBS_H_

#include "flatbuffers/flatbuffers.h"

#include "byte_dict_generated.h"
#include "controller_generated.h"
#include "devices_generated.h"
#include "pose_generated.h"

namespace fbs {

struct Request;
struct RequestBuilder;

struct Message;
struct MessageBuilder;

enum RequestType {
  RequestType_ControllerRequest = 0,
  RequestType_DeviceListRequest = 1,
  RequestType_MIN = RequestType_ControllerRequest,
  RequestType_MAX = RequestType_DeviceListRequest
};

inline const RequestType (&EnumValuesRequestType())[2] {
  static const RequestType values[] = {
    RequestType_ControllerRequest,
    RequestType_DeviceListRequest
  };
  return values;
}

inline const char * const *EnumNamesRequestType() {
  static const char * const names[3] = {
    "ControllerRequest",
    "DeviceListRequest",
    nullptr
  };
  return names;
}

inline const char *EnumNameRequestType(RequestType e) {
  if (flatbuffers::IsOutRange(e, RequestType_ControllerRequest, RequestType_DeviceListRequest)) return "";
  const size_t index = static_cast<size_t>(e);
  return EnumNamesRequestType()[index];
}

enum Msg {
  Msg_NONE = 0,
  Msg_Controller = 1,
  Msg_DeviceList = 2,
  Msg_Request = 3,
  Msg_MIN = Msg_NONE,
  Msg_MAX = Msg_Request
};

inline const Msg (&EnumValuesMsg())[4] {
  static const Msg values[] = {
    Msg_NONE,
    Msg_Controller,
    Msg_DeviceList,
    Msg_Request
  };
  return values;
}

inline const char * const *EnumNamesMsg() {
  static const char * const names[5] = {
    "NONE",
    "Controller",
    "DeviceList",
    "Request",
    nullptr
  };
  return names;
}

inline const char *EnumNameMsg(Msg e) {
  if (flatbuffers::IsOutRange(e, Msg_NONE, Msg_Request)) return "";
  const size_t index = static_cast<size_t>(e);
  return EnumNamesMsg()[index];
}

template<typename T> struct MsgTraits {
  static const Msg enum_value = Msg_NONE;
};

template<> struct MsgTraits<fbs::Controller> {
  static const Msg enum_value = Msg_Controller;
};

template<> struct MsgTraits<fbs::DeviceList> {
  static const Msg enum_value = Msg_DeviceList;
};

template<> struct MsgTraits<fbs::Request> {
  static const Msg enum_value = Msg_Request;
};

bool VerifyMsg(flatbuffers::Verifier &verifier, const void *obj, Msg type);
bool VerifyMsgVector(flatbuffers::Verifier &verifier, const flatbuffers::Vector<flatbuffers::Offset<void>> *values, const flatbuffers::Vector<uint8_t> *types);

struct Request FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef RequestBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_TYPE = 4
  };
  fbs::RequestType type() const {
    return static_cast<fbs::RequestType>(GetField<uint32_t>(VT_TYPE, 0));
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint32_t>(verifier, VT_TYPE) &&
           verifier.EndTable();
  }
};

struct RequestBuilder {
  typedef Request Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_type(fbs::RequestType type) {
    fbb_.AddElement<uint32_t>(Request::VT_TYPE, static_cast<uint32_t>(type), 0);
  }
  explicit RequestBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  RequestBuilder &operator=(const RequestBuilder &);
  flatbuffers::Offset<Request> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<Request>(end);
    return o;
  }
};

inline flatbuffers::Offset<Request> CreateRequest(
    flatbuffers::FlatBufferBuilder &_fbb,
    fbs::RequestType type = fbs::RequestType_ControllerRequest) {
  RequestBuilder builder_(_fbb);
  builder_.add_type(type);
  return builder_.Finish();
}

struct Message FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef MessageBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_MESSAGE_TYPE = 4,
    VT_MESSAGE = 6
  };
  fbs::Msg message_type() const {
    return static_cast<fbs::Msg>(GetField<uint8_t>(VT_MESSAGE_TYPE, 0));
  }
  const void *message() const {
    return GetPointer<const void *>(VT_MESSAGE);
  }
  template<typename T> const T *message_as() const;
  const fbs::Controller *message_as_Controller() const {
    return message_type() == fbs::Msg_Controller ? static_cast<const fbs::Controller *>(message()) : nullptr;
  }
  const fbs::DeviceList *message_as_DeviceList() const {
    return message_type() == fbs::Msg_DeviceList ? static_cast<const fbs::DeviceList *>(message()) : nullptr;
  }
  const fbs::Request *message_as_Request() const {
    return message_type() == fbs::Msg_Request ? static_cast<const fbs::Request *>(message()) : nullptr;
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint8_t>(verifier, VT_MESSAGE_TYPE) &&
           VerifyOffset(verifier, VT_MESSAGE) &&
           VerifyMsg(verifier, message(), message_type()) &&
           verifier.EndTable();
  }
};

template<> inline const fbs::Controller *Message::message_as<fbs::Controller>() const {
  return message_as_Controller();
}

template<> inline const fbs::DeviceList *Message::message_as<fbs::DeviceList>() const {
  return message_as_DeviceList();
}

template<> inline const fbs::Request *Message::message_as<fbs::Request>() const {
  return message_as_Request();
}

struct MessageBuilder {
  typedef Message Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_message_type(fbs::Msg message_type) {
    fbb_.AddElement<uint8_t>(Message::VT_MESSAGE_TYPE, static_cast<uint8_t>(message_type), 0);
  }
  void add_message(flatbuffers::Offset<void> message) {
    fbb_.AddOffset(Message::VT_MESSAGE, message);
  }
  explicit MessageBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  MessageBuilder &operator=(const MessageBuilder &);
  flatbuffers::Offset<Message> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<Message>(end);
    return o;
  }
};

inline flatbuffers::Offset<Message> CreateMessage(
    flatbuffers::FlatBufferBuilder &_fbb,
    fbs::Msg message_type = fbs::Msg_NONE,
    flatbuffers::Offset<void> message = 0) {
  MessageBuilder builder_(_fbb);
  builder_.add_message(message);
  builder_.add_message_type(message_type);
  return builder_.Finish();
}

inline bool VerifyMsg(flatbuffers::Verifier &verifier, const void *obj, Msg type) {
  switch (type) {
    case Msg_NONE: {
      return true;
    }
    case Msg_Controller: {
      auto ptr = reinterpret_cast<const fbs::Controller *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case Msg_DeviceList: {
      auto ptr = reinterpret_cast<const fbs::DeviceList *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case Msg_Request: {
      auto ptr = reinterpret_cast<const fbs::Request *>(obj);
      return verifier.VerifyTable(ptr);
    }
    default: return true;
  }
}

inline bool VerifyMsgVector(flatbuffers::Verifier &verifier, const flatbuffers::Vector<flatbuffers::Offset<void>> *values, const flatbuffers::Vector<uint8_t> *types) {
  if (!values || !types) return !values && !types;
  if (values->size() != types->size()) return false;
  for (flatbuffers::uoffset_t i = 0; i < values->size(); ++i) {
    if (!VerifyMsg(
        verifier,  values->Get(i), types->GetEnum<Msg>(i))) {
      return false;
    }
  }
  return true;
}

}  // namespace fbs

#endif  // FLATBUFFERS_GENERATED_MESSAGE_FBS_H_
